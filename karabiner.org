# -*-mode:org; coding:utf-8; time-stamp-pattern:"8/#\+DATE:[ \t]+%Y-%02m-%02d %5z$" -*-
# Created: Fang Lungang 2024-07-19

#+TITLE: My Karabiner Elements configuration
#+AUTHOR: Fang Lungang
#+DATE: 2024-08-31 +1000
#+DESCRIPTION: Layered hotkeys using Karabiner Elements
#+KEYWORDS: Karabiner
#+PROPERTY: header-args:json-ts :tangle ~/.config/karabiner/karabiner.json :mkdirp yes :noweb yes

* Hotkey sequence instead of hotkey combination

Conventionally, a hotkey binding involves pressing several keys at the same
time. The problem with this approach is that we rapidly exhaust the available
key bindings.

Defining hotkeys in layers allows us to define sequences of key strikes instead.
This way, the available key bindings increase exponentially. For example, if we
define "Hyper + w" as the prefix for "window movement" layer and "Hyper + f" for
the "Focus movement", then we can use the same set of keys (say h,j,k,l for the
directions of the movement) without conflicts.

* Variables

#+NAME: yabai
#+begin_src emacs-lisp
(executable-find "yabai")
#+end_src

#+NAME: config
#+begin_src emacs-lisp
(expand-file-name "~/.config/yabai")
#+end_src

* Configuration file start
#+begin_src json-ts
  {
#+end_src
* Global settings
#+begin_src json-ts
  "global": {
    "ask_for_confirmation_before_quitting": true,
    "check_for_updates_on_startup": true,
    "show_in_menu_bar": true,
    "show_profile_name_in_menu_bar": false,
    "unsafe_ui": false
  },
#+end_src
* Profiles
** Profiles start
#+begin_src json-ts
  "profiles": [{
      "name": "default",
      "selected": true,
#+end_src
** Devices
IMPORTANT: remember to iterate each and every keyboard/mouse and explicitly set
=ignore= to false.
*** Start
#+begin_src json-ts
  "devices": [
#+end_src
*** Built-in keyboard
#+begin_src json-ts
  {
    "identifiers": {
      "is_game_pad": false,
      "is_keyboard": true,
      "is_pointing_device": false,
      "product_id": 835,
      "vendor_id": 1452
    },
    "ignore": false,
    "manipulate_caps_lock_led": true
  },
#+end_src

*** Keychron Q1
#+begin_src json-ts
  {
    "identifiers": {
      "is_keyboard": true,
      "is_pointing_device": true,
      "product_id": 1552,
      "vendor_id": 13364
    },
    "ignore": false
  },
#+end_src

*** Niz
#+begin_src json-ts
  {
      "identifiers": {
          "is_keyboard": true,
          "is_pointing_device": true,
          "product_id": 272,
          "vendor_id": 1452
      },
      "ignore": false
  },
#+end_src

*** Ducky 87
Swap Option keys and Command keys, converting it to a "Mac compatible keyboard".
#+begin_src json-ts
  {
    "identifiers": {
      "is_keyboard": true,
      "product_id": 12309,
      "vendor_id": 1241
    },
    "ignore": false,
    "simple_modifications": [
      {"from": {"key_code": "left_option"}, "to": [{"key_code": "left_command"}]},
      {"from": {"key_code": "left_command"}, "to": [{"key_code": "left_option"}]},
      {"from": {"key_code": "right_option"}, "to": [{"key_code": "right_command"}]},
      {"from": {"key_code": "right_command"}, "to": [{"key_code": "right_option"}]}
    ]
  },
#+end_src
*** Filco 87
Swap Option keys and Command keys, converting it to a "Mac compatible keyboard".
#+begin_src json-ts
  {
    "identifiers": {
      "is_keyboard": true,
      "product_id": 8209,
      "vendor_id": 1241
    },
    "ignore": false,
    "simple_modifications": [
      {"from": {"key_code": "left_option"}, "to": [{"key_code": "left_command"}]},
      {"from": {"key_code": "left_command"}, "to": [{"key_code": "left_option"}]},
      {"from": {"key_code": "right_option"}, "to": [{"key_code": "right_command"}]},
      {"from": {"key_code": "right_command"}, "to": [{"key_code": "right_option"}]}
    ]
  },
#+end_src

*** Lift Mouse
#+begin_src json-ts
  {
      "identifiers": {
          "is_pointing_device": true,
          "product_id": 45105,
          "vendor_id": 1133
      },
      "ignore": false
  }
#+end_src

*** End
#+begin_src json-ts
],
#+end_src
** Complex modification rules start
#+begin_src json-ts
  "complex_modifications": {
      "rules": [
#+end_src
** COMMENT Home row modifier
TODO:
- adjust timeout
- adjust the virtual hyper key to work with it.
#+begin_src json-ts
  {
    "description": "Home row modifer",
    "manipulators": [
      {
        "parameters": {
          "basic.to_if_held_down_threshold_milliseconds": 0,
          "basic.to_if_alone_timeout_milliseconds": 300
        },
        "to_if_held_down": [
          {
            "key_code": "left_control"
          }
        ],
        "to_if_alone": [
          {
            "key_code": "a"
          }
        ],
        "from": {
          "modifiers": {
            "optional": [
              "any"
            ]
          },
          "key_code": "a"
        },
        "type": "basic"
      },
      {
          "parameters": {
            "basic.to_if_held_down_threshold_milliseconds": 0,
          "basic.to_if_alone_timeout_milliseconds": 300
          },
          "to_if_held_down": [
            {
              "key_code": "left_option"
            }
          ],
          "to_if_alone": [
            {
              "key_code": "s"
            }
          ],
          "from": {
            "modifiers": {
              "optional": [
                "any"
              ]
            },
            "key_code": "s"
          },
          "type": "basic"
      },
      {
          "parameters": {
            "basic.to_if_held_down_threshold_milliseconds": 0,
          "basic.to_if_alone_timeout_milliseconds": 300
          },
          "to_if_held_down": [
            {
              "key_code": "left_command"
            }
          ],
          "to_if_alone": [
            {
              "key_code": "d"
            }
          ],
          "from": {
            "modifiers": {
              "optional": [
                "any"
              ]
            },
            "key_code": "d"
          },
          "type": "basic"
      },
      {
          "parameters": {
            "basic.to_if_held_down_threshold_milliseconds": 0,
          "basic.to_if_alone_timeout_milliseconds": 300
          },
          "to_if_held_down": [
            {
              "key_code": "right_command"
            }
          ],
          "to_if_alone": [
            {
              "key_code": "k"
            }
          ],
          "from": {
            "modifiers": {
              "optional": [
                "any"
              ]
            },
            "key_code": "k"
          },
          "type": "basic"
      },
      {
          "parameters": {
            "basic.to_if_held_down_threshold_milliseconds": 0,
          "basic.to_if_alone_timeout_milliseconds": 300
          },
          "to_if_held_down": [
            {
              "key_code": "right_option"
            }
          ],
          "to_if_alone": [
            {
              "key_code": "l"
            }
          ],
          "from": {
            "modifiers": {
              "optional": [
                "any"
              ]
            },
            "key_code": "l"
          },
          "type": "basic"
      },
      {
          "parameters": {
            "basic.to_if_held_down_threshold_milliseconds": 0,
          "basic.to_if_alone_timeout_milliseconds": 300
          },
          "to_if_held_down": [
            {
              "key_code": "right_control"
            }
          ],
          "to_if_alone": [
            {
              "key_code": "semicolon"
            }
          ],
          "from": {
            "modifiers": {
              "optional": [
                "any"
              ]
            },
            "key_code": "semicolon"
          },
          "type": "basic"
      }
    ]
  },
#+end_src
** Enter held down as control
#+begin_src json-ts
  {
    "description": "Hold Enter for Control",
    "manipulators": [
      {
        "parameters": {
          "basic.to_if_held_down_threshold_milliseconds": 0,
          "basic.to_if_alone_timeout_milliseconds": 120
        },
        "to_if_held_down": [
          {
            "key_code": "right_control"
          }
        ],
        "to_if_alone": [
          {
            "key_code": "return_or_enter"
          }
        ],
        "from": {
          "modifiers": {
            "optional": [
              "any"
            ]
          },
          "key_code": "return_or_enter"
        },
        "type": "basic"
      }
    ]
  },
#+end_src
** Caps Lock held down as hyper
#+begin_src json-ts
  {
    "description": "Caps Lock -> Hyper Key (⌃⌥⇧⌘)",
    "manipulators": [
      {
        "description": "Caps Lock -> Hyper Key",
        "from": {
          "key_code": "caps_lock",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "parameters": {
          "basic.to_if_held_down_threshold_milliseconds": 0,
          "basic.to_if_alone_timeout_milliseconds": 300
        },
        "to_if_held_down": [
          {
            "set_variable": {
              "name": "hyper",
              "value": 1
            }
          }
        ],
        "to_if_alone": [
          {
            "key_code": "caps_lock"
          }
        ],
        "to_after_key_up": [
          {
            "set_variable": {
              "name": "hyper",
              "value": 0
            }
          },
          {
            "set_variable": {
              "name": "move_focus",
              "value": 0
            }
          },
          {
            "set_variable": {
              "name": "move_window",
              "value": 0
            }
          },
          {
            "set_variable": {
              "name": "warp_window",
              "value": 0
            }
          },
          {
            "set_variable": {
              "name": "resize_window",
              "value": 0
            }
          },
          {
            "set_variable": {
              "name": "stack_window",
              "value": 0
            }
          },
          {
            "set_variable": {
              "name": "select_app",
              "value": 0
            }
          }
        ],
        "type": "basic"
      }
    ]
  },
#+end_src
** Move focus: Hyper-f
#+begin_src json-ts
  {
    "description": "Focus: Hyper-f",
    "manipulators": [
      {
        "description": "Prefix: f",
        "type": "basic",
        "from": {
          "key_code": "f",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "to": [
          {
            "set_variable": {
              "name": "move_focus",
              "value": 1
            }
          }
        ],
        "conditions": [
          {
            "type": "variable_if",
            "name": "hyper",
            "value": 1
          }
        ]
      },
      {
        "description": "Move focus to the previous: p",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --focus recent"
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "p",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "move_focus",
            "value": 1
          }
        ]
      },
      {
        "description": "Move focus to the left: h",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --focus west || (<<yabai()>> -m display --focus west && <<yabai()>> -m window --focus last)"
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "h",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "move_focus",
            "value": 1
          }
        ]
      },
      {
        "description": "Move focus downward: j",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --focus south"
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "j",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "move_focus",
            "value": 1
          }
        ]
      },
      {
        "description": "Move focus upward: k",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --focus north"
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "k",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "move_focus",
            "value": 1
          }
        ]
      },
      {
        "description": "Move focus to the right: l",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --focus east || (<<yabai()>> -m display --focus east && <<yabai()>> -m window --focus first)"
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "l",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "move_focus",
            "value": 1
          }
        ]
      }
    ]
  },
#+end_src
** Move window: Hyper-w
*** Start
#+begin_src json-ts
  {
    "description": "Move window: Hyper-m",
    "manipulators": [
#+end_src

*** Define the prefix
#+begin_src json-ts
  {
    "description": "Prefix: m",
    "type": "basic",
    "from": {
      "key_code": "m",
      "modifiers": {
        "optional": [
          "any"
        ]
      }
    },
    "to": [
      {
        "set_variable": {
          "name": "move_window",
          "value": 1
        }
      }
    ],
    "conditions": [
      {
        "type": "variable_if",
        "name": "hyper",
        "value": 1
      },
      {
        "type": "variable_if",
        "name": "move_window",
        "value": 0
      }
    ]
  },
#+end_src

*** Toggle split
#+begin_src json-ts
  {
    "description": "Toggle window split: spacebar",
    "to": [
      {
        "shell_command": "<<yabai()>> -m window --toggle split"
      }
    ],
    "type": "basic",
    "from": {
      "key_code": "spacebar",
      "modifiers": {
        "optional": [
          "any"
        ]
      }
    },
    "conditions": [
      {
        "type": "variable_if",
        "name": "move_window",
        "value": 1
      }
    ]
  },
#+end_src
*** Swap spaces with the next monitor
#+begin_src json-ts
{
  "description": "Swap monitors: s",
  "to": [
    {
      "shell_command": "<<config()>>/swap-spaces"
    }
  ],
  "type": "basic",
  "from": {
    "key_code": "s",
    "modifiers": {
      "optional": [
        "any"
      ]
    }
  },
  "conditions": [
    {
      "type": "variable_if",
      "name": "move_window",
      "value": 1
    }
  ]
},
#+end_src
*** Swap windows: h, j, k, l
#+begin_src json-ts
  {
    "description": "Move window to the left",
    "to": [
      {
        "shell_command": "<<yabai()>> -m window --swap west || <<config()>>/swap-windows west"
      }
    ],
    "type": "basic",
    "from": {
      "key_code": "h",
      "modifiers": {
        "optional": [
          "any"
        ]
      }
    },
    "conditions": [
      {
        "type": "variable_if",
        "name": "move_window",
        "value": 1
      }
    ]
  },
  {
    "description": "Move window downward",
    "to": [
      {
        "shell_command": "<<yabai()>> -m window --swap south"
      }
    ],
    "type": "basic",
    "from": {
      "key_code": "j",
      "modifiers": {
        "optional": [
          "any"
        ]
      }
    },
    "conditions": [
      {
        "type": "variable_if",
        "name": "move_window",
        "value": 1
      }
    ]
  },
  {
    "description": "Move window upward",
    "to": [
      {
        "shell_command": "<<yabai()>> -m window --swap north"
      }
    ],
    "type": "basic",
    "from": {
      "key_code": "k",
      "modifiers": {
        "optional": [
          "any"
        ]
      }
    },
    "conditions": [
      {
        "type": "variable_if",
        "name": "move_window",
        "value": 1
      }
    ]
  },
  {
    "description": "Move window to the right",
    "to": [
      {
        "shell_command": "<<yabai()>> -m window --swap east || <<config()>>/swap-windows east"
      }
    ],
    "type": "basic",
    "from": {
      "key_code": "l",
      "modifiers": {
        "optional": [
          "any"
        ]
      }
    },
    "conditions": [
      {
        "type": "variable_if",
        "name": "move_window",
        "value": 1
      }
    ]
  },
  {
    "description": "Swap window with the recent",
    "to": [
      {
        "shell_command": "<<yabai()>> -m window --swap recent"
      }
    ],
    "type": "basic",
    "from": {
      "key_code": "p",
      "modifiers": {
        "optional": [
          "any"
        ]
      }
    },
    "conditions": [
      {
        "type": "variable_if",
        "name": "move_window",
        "value": 1
      }
    ]
  },
#+end_src
*** An extra "w" for warping instead of swapping
#+begin_src json-ts
  {
    "description": "An extra 'w' for warp",
    "type": "basic",
    "from": {
      "key_code": "w",
      "modifiers": {
        "optional": [
          "any"
        ]
      }
    },
    "to": [
      {
        "set_variable": {
          "name": "warp_window",
          "value": 1
        }
      },
      {
        "set_variable": {
          "name": "move_window",
          "value": 0
        }
      }

    ],
    "conditions": [
      {
        "type": "variable_if",
        "name": "hyper",
        "value": 1
      },
      {
        "type": "variable_if",
        "name": "move_window",
        "value": 1
      }
    ]
  },
#+end_src

*** Warp into: h, j, k, l

#+begin_src json-ts
  {
    "description": "Warp window to the left",
    "to": [
      {
        "shell_command": "<<yabai()>> -m window --warp west || (<<yabai()>> -m window --display west && <<yabai()>> -m display --focus west)"
      }
    ],
    "type": "basic",
    "from": {
      "key_code": "h",
      "modifiers": {
        "optional": [
          "any"
        ]
      }
    },
    "conditions": [
      {
        "type": "variable_if",
        "name": "warp_window",
        "value": 1
      }
    ]
  },
  {
    "description": "Warp window downward",
    "to": [
      {
        "shell_command": "<<yabai()>> -m window --warp south || (<<yabai()>> -m window --display south && <<yabai()>> -m display --focus south)"
      }
    ],
    "type": "basic",
    "from": {
      "key_code": "j",
      "modifiers": {
        "optional": [
          "any"
        ]
      }
    },
    "conditions": [
      {
        "type": "variable_if",
        "name": "warp_window",
        "value": 1
      }
    ]
  },
  {
    "description": "Warp window upward",
    "to": [
      {
        "shell_command": "<<yabai()>> -m window --warp north || (<<yabai()>> -m window --display north && <<yabai()>> -m display --focus north)"
      }
    ],
    "type": "basic",
    "from": {
      "key_code": "k",
      "modifiers": {
        "optional": [
          "any"
        ]
      }
    },
    "conditions": [
      {
        "type": "variable_if",
        "name": "warp_window",
        "value": 1
      }
    ]
  },
  {
    "description": "Warp window to the right",
    "to": [
      {
        "shell_command": "<<yabai()>> -m window --warp east || (<<yabai()>> -m window --display east && <<yabai()>> -m display --focus east)"
      }
    ],
    "type": "basic",
    "from": {
      "key_code": "l",
      "modifiers": {
        "optional": [
          "any"
        ]
      }
    },
    "conditions": [
      {
        "type": "variable_if",
        "name": "warp_window",
        "value": 1
      }
    ]
  }
#+end_src
*** End
#+begin_src json-ts
    ]
  },
#+end_src
** Resize window: Hyper-s
#+begin_src json-ts
  {
    "description": "Resize windows: Hyper-s",
    "manipulators": [
      {
        "description": "Prefix: s",
        "type": "basic",
        "from": {
          "key_code": "s",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "to": [
          {
            "set_variable": {
              "name": "resize_window",
              "value": 1
            }
          }
        ],
        "conditions": [
          {
            "type": "variable_if",
            "name": "hyper",
            "value": 1
          }
        ]
      },
      {
        "description": "Balance split: spacebar",
        "to": [
          {
            "shell_command": "<<yabai()>> -m space --balance"
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "spacebar",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "resize_window",
            "value": 1
          }
        ]
      },
      {
        "description": "Move split to the left: h",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --resize right:-25:0 || <<yabai()>> -m window --resize left:-25:0",
            "repeat": true
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "h",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "resize_window",
            "value": 1
          }
        ]
      },
      {
        "description": "Move split downward: j",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --resize bottom:0:25 || <<yabai()>> -m window --resize top:0:25"
          }
        ],        "type": "basic",
        "from": {
          "key_code": "j",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "resize_window",
            "value": 1
          }
        ]
      },
      {
        "description": "Move split upward: k",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --resize bottom:0:-25 || <<yabai()>> -m window --resize top:0:-25"
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "k",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "resize_window",
            "value": 1
          }
        ]
      },
      {
        "description": "Move split to the right: l",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --resize right:25:0 || <<yabai()>> -m window --resize left:25:0"
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "l",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "resize_window",
            "value": 1
          }
        ]
      },
      {
        "description": "Toggle full screen: ;",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --toggle zoom-fullscreen"
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "semicolon",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "resize_window",
            "value": 1
          }
        ]
      }
    ]
  },
#+end_src

** Stack window: Hyper-t
#+begin_src json-ts
  {
    "description": "Stack windows: Hyper-t",
    "manipulators": [
      {
        "description": "Prefix: t",
        "type": "basic",
        "from": {
          "key_code": "t",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "to": [
          {
            "set_variable": {
              "name": "stack_window",
              "value": 1
            }
          }
        ],
        "conditions": [
          {
            "type": "variable_if",
            "name": "hyper",
            "value": 1
          }
        ]
      },
      {
        "description": "Stack onto the left: h",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --stack west"
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "h",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "stack_window",
            "value": 1
          }
        ]
      },
      {
        "description": "Stack downward: j",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --stack south"
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "j",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "stack_window",
            "value": 1
          }
        ]
      },
      {
        "description": "Stack upward: k",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --stack north"
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "k",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "stack_window",
            "value": 1
          }
        ]
      },
      {
        "description": "stack onto the right: l",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --stack east",
            "repeat": true
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "l",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "stack_window",
            "value": 1
          }
        ]
      },
      {
        "description": "unstack: u",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --toggle float && <<yabai()>> -m window --toggle float",
            "repeat": true
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "u",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "stack_window",
            "value": 1
          }
        ]
      },
      {
        "description": "flip previous: p",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --focus stack.prev || <<yabai()>> -m window --focus stack.last",
            "repeat": true
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "p",
          "modifiers": {
            "optional": [
              "any"
            ]

 }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "stack_window",
            "value": 1
          }
        ]
      },
      {
        "description": "flip next: n",
        "to": [
          {
            "shell_command": "<<yabai()>> -m window --focus stack.next || <<yabai()>> -m window --focus stack.first",
            "repeat": true
          }
        ],
        "type": "basic",
        "from": {
          "key_code": "n",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "stack_window",
            "value": 1
          }
        ]
      }
    ]
  },
#+end_src

** Open/select applications
#+begin_src json-ts
  {
    "description": "Select application: Hyper-a",
    "manipulators": [
      {
        "description": "Prefix: a",
        "to": [
          {
            "set_variable": {
              "name": "select_app",
              "value": 1
            }
          }
        ],
        "from": {
          "key_code": "a",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "hyper",
            "value": 1
          }
        ],
        "type": "basic"
      },
      {
        "description": "terminal",
        "to": [
          {
            "shell_command": "open -a wezterm.app"
          }
        ],
        "from": {
          "key_code": "spacebar",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "select_app",
            "value": 1
          }
        ],
        "type": "basic"
      },
      {
        "description": "web browser",
        "to": [
          {
            "shell_command": "open -a 'google chrome.app'"
          }
        ],
        "from": {
          "key_code": "h",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "select_app",
            "value": 1
          }
        ],
        "type": "basic"
      },
      {
        "description": "instant message",
        "to": [
          {
            "shell_command": "open -a slack.app"
          }
        ],
        "from": {
          "key_code": "j",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "select_app",
            "value": 1
          }
        ],
        "type": "basic"
      },
      {
        "description": "Alternative web browser",
        "to": [
          {
            "shell_command": "open -a safari.app"
          }
        ],
        "from": {
          "key_code": "l",
          "modifiers": {
            "optional": [
              "any"
            ]
          }
        },
        "conditions": [
          {
            "type": "variable_if",
            "name": "select_app",
            "value": 1
          }
        ],
        "type": "basic"
      }
    ]
  },
#+end_src

** Lock and sleep
#+begin_src json-ts
  {
    "description": "Lock screen or sleep",
    "manipulators": [
      {
        "description": "Lock screen",
        "to": [
          {
            "key_code": "q",
            "modifiers": ["control", "command"]
          }
        ],
        "from": {
          "key_code": "home",
          "modifiers": {
            "mandatory": [
              "control"
            ]
          }
        },
        "type": "basic"
      },
      {
        "description": "Lock screen and then Sleep",
        "to": [
          {
            "key_code": "q",
            "modifiers": ["control", "command"]
          },
          {
            "software_function": {
              "iokit_power_management_sleep_system": {}
            }
          }
        ],
        "from": {
          "key_code": "home",
          "modifiers": {
            "mandatory": [
              "option"
            ]
          }
        },
        "type": "basic"
      }
    ]
  },
#+end_src

** Additional mouse buttons
#+begin_src json-ts
  {
    "description": "Mouse button 4/5 to copy/paste",
    "manipulators": [
      {
        "from": {
          "pointing_button": "button4"
        },
        "to": [
          {
            "key_code": "c",
            "modifiers": [
              "command"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "from": {
          "pointing_button": "button5"
        },
        "to": [
          {
            "key_code": "v",
            "modifiers": [
              "command"
            ]
          }
        ],
        "type": "basic"
      }
    ]
  },
#+end_src

** Emacs key bindings everywhere
NOTE:
- A variety of key bindings are already either fully or partially supported by
  certain applications. Hence, only need to define those that missing or not
  fully implemented.
- There is a limitation in what we can reasonable achieve. For example, we can
  bind =Option-d= to copy and delete one word forward. However, since there is
  no kill ring, it cannot "accumulate" all the killed text like the Emacs
  =kill-word= does when run multiple times consecutively.
- To get the bundle ID of an application, run =osascript -e 'id of app "wezterm"'=.

#+begin_src json-ts
  {
    "description": "Emacs key bindings everywhere",
    "manipulators": [
      {
        "description": "search: C-s",
        "from": {
          "key_code": "s",
          "modifiers": {
            "mandatory": [ "control" ]
          }
        },
        "to": [
          {
            "key_code": "f",
            "modifiers": [ "command" ]
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "description": "backward word: M-b",
        "from": {
          "key_code": "b",
          "modifiers": {
            "mandatory": [ "option" ]
          }
        },
        "to": [
          {
            "key_code": "left_arrow",
            "modifiers": [ "option" ]
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "description": "forward word: M-f",
        "from": {
          "key_code": "f",
          "modifiers": {
            "mandatory": [ "option" ]
          }
        },
        "to": [
          {
            "key_code": "right_arrow",
            "modifiers": [ "option" ]
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "description": "kill word: M-d",
        "from": {
          "key_code": "d",
          "modifiers": {
            "mandatory": [ "option" ]
          }
        },
        "to": [
          {
            "key_code": "right_arrow",
            "modifiers": [
              "shift", "option"
            ]
          },
          {
            "key_code": "x",
            "modifiers" : [ "command" ]
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "description": "kill word back: M-<backspace>",
        "from": {
          "key_code": "delete_or_backspace",
          "modifiers": {
            "mandatory": [ "option" ]
          }
        },
        "to": [
          {
            "key_code": "left_arrow",
            "modifiers": [
              "shift", "option"
            ]
          },
          {
            "key_code": "x",
            "modifiers" : [ "command" ]
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "description": "newline: C-m",
        "from": {
          "key_code": "m",
          "modifiers": {
            "mandatory": [ "control" ]
          }
        },
        "to": [
          {
            "key_code": "return_or_enter",
            "modifiers": [ "shift" ]
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "description": "copy: M-w",
        "from": {
          "key_code": "w",
          "modifiers": {
            "mandatory": [ "option" ]
          }
        },
        "to": [
          {
            "key_code": "c",
            "modifiers": [ "command" ]
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "description": "paste: C-y",
        "from": {
          "key_code": "y",
          "modifiers": {
            "mandatory": [ "control" ]
          }
        },
        "to": [
          {
            "key_code": "v",
            "modifiers": [ "command" ]
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "description": "undo: C-_",
        "from": {
          "key_code": "hyphen",
          "modifiers": {
            "mandatory": [ "control", "shift" ]
          }
        },
        "to": [
          {
            "key_code": "z",
            "modifiers": [ "command" ]
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "description": "page down: C-v",
        "from": {
          "key_code": "v",
          "modifiers": {
            "mandatory": [ "control" ]
          }
        },
        "to": [
          {
            "key_code": "page_down"
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "description": "page up: M-v",
        "from": {
          "key_code": "v",
          "modifiers": {
            "mandatory": [ "option" ]
          }
        },
        "to": [
          {
            "key_code": "page_up"
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "description": "up: C-p",
        "from": {
          "key_code": "p",
          "modifiers": {
            "mandatory": [ "control" ]
          }
        },
        "to": [
          {
            "key_code": "up_arrow"
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      },
      {
        "description": "down: C-n",
        "from": {
          "key_code": "n",
          "modifiers": {
            "mandatory": [ "control" ]
          }
        },
        "to": [
          {
            "key_code": "down_arrow"
          }
        ],
        "conditions": [
          {
            "type": "frontmost_application_unless",
            "bundle_identifiers": [
              "^org\\.gnu\\.Emacs$",
              "^com\\.github\\.wez\\.wezterm$",
              "^com\\.googlecode\\.iterm2$"
            ]
          }
        ],
        "type": "basic"
      }
    ]
  }

#+end_src
** Complex modification rules end
#+begin_src json-ts
  ]}
#+end_src
** Profiles end
#+begin_src json-ts
  }]
#+end_src
* Configuration file end
#+begin_src json-ts
  }
#+end_src
