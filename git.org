# -*-mode:org; coding:utf-8; time-stamp-pattern:"8/#\\+DATE:[ \t]+%Y-%02m-%02d %5z$" -*-
# Created:  Fang Lungang 2024-05-17

#+TITLE: My Git Configurations
#+AUTHOR: Fang Lungang
#+DATE: 2025-03-26 +1100

* Global git ignore
:PROPERTIES:
:header-args:conf: :tangle ~/.gitignore
:END:

This is global(default) ignore configuration. Modify =repo/.gitignore= for repo
specific ignores.

Refer to https://github.com/github/gitignore for more to ignore.

** backup files
#+begin_src conf
*~
*.swp
#+end_src

** Compilation output
#+begin_src conf
*.elc
*.pyc
*.o
*.class
#+end_src

** Cache generated by various applications
#+begin_src conf
.Trashes
Thumbs.db
#+end_src

* Global git config
:PROPERTIES:
:header-args:conf: :tangle ~/.gitconfig
:END:

#+begin_src conf
  [github]
      user = GITHUB_USERNAME

  [user]
      name = Your Name
      email = you@email.com

  [checkout]
      defaultRemote=origin

  [core]
      excludesfile = ~/.gitignore # A global ignore file
      # autocrlf = false
      # filemode = false
      # pager = less -r   # uncomment this line to have "less" wrap long lines when 'git diff'
      # editor = emacsclient -a \"\" -t

  [alias]
      st = status
      df = diff
      ds = diff --stat
      dc = diff --cached

      co = checkout
      ci = commit
      amend = commit --amend

      pk = cherry-pick
      rb = rebase
      rst = reset
      last = log -1 HEAD

      lg = log --graph --abbrev-commit --pretty=format:'%C(cyan)%h%C(reset) - %C(green)%s %C(dim white)- %cr (%an)%C(reset) %C(yellow)%d'
      topo = log --graph --simplify-by-decoration --pretty=format:"%d%h" --all

      # http proxy
      hp = config --global http.proxy localhost:8888
      nohp = config --global http.proxy ""

      recent-branches = for-each-ref refs/heads --sort='-committerdate' --format='%(committerdate:iso) %(refname:short)%09 %(authorname)%09 - %(contents:subject)'

  [credential]
      helper = cache --timeout=3600

  [color]
      ui = auto

  [diff]
      wsErrorHighlight = all

  [apply]
      whitespace = warn

  [diff "gpg"]
      textconv = gpg --no-tty --decrypt
#+end_src

* Block pushing certain branches

To avoid accidentally push a branch with sensitive data, we can add a hook to
corresponding repository.

For example, to block myself from pushing =mine= to github, I tangle (write) the
following code snippet into =~/.dotfiles/.git/hooks/pre-push= in with file
permission =o755=.

#+begin_src bash :tangle ~/.dotfiles/.git/hooks/pre-push :tangle-mode o755
  #!/usr/bin/env bash

  branch_blocked=mine

  if grep -q "$branch_blocked"; then
      echo "Branch '$branch_blocked' is blocked by yourself." >&2
      exit 1
  fi
#+end_src

IMPORTANT:
- Ensure this file's permission is correct.
- Manually copy this file to designated directory if you clone the repository to
  a different place as this hook script itself is *not* copied over by =git
  clone=.
