# Created:  Fang lungang 2010-11-08
# Modified: Lungang Fang 2023-11-17T14:01:08+1100>

#* color theme
source-file ~/.tmux.d/lgfang-concise

#* Timers
set-option -g display-time 3000
set-option -g history-limit 50000
set-option -g repeat-time 500

#* Status bar format
# set-option -g base-index 1      # window index starts from 1 instead of 0
set-option -g status on
set-window-option -g automatic-rename on
set-window-option -g monitor-activity on
# set-option -g status-utf8 on
set-option -g status-justify right # centre
# set-option -g window-status-format "#I:#W"
set-option -g status-left-length 30
set-option -g status-left "[#S@#h] #T"
# set-option -g status-left "#[fg=green]#S:#T"
set-option -g status-right ""

#* Terminal type
## NOTE: Comment out this if you don't know what it is
set-option -g default-terminal "xterm-256color"
# set-option -g default-terminal "screen-256color"
# or start tmux with "tmux -2" to force 256
## "if-shell" runs asynchronously, so it does not help

#* Terminal emulator window title
set-option -g set-titles on
set-option -g set-titles-string 'tmux:#S@#h'

#* Mouse support
set-option -g mouse on
#** Enter copy mode directly on mouse wheel
## Check #{alternate_on} to determine if the underlying application uses the
## alternate display and shall we pass the event alone or not.
bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
#** Speedup (based on Thomas Sattler at
## https://groups.google.com/forum/#!topic/tmux-users/TRwPgEOVqho)
bind-key -T root C-WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T copy-mode-emacs C-WheelUpPane send-keys -X halfpage-up
bind-key -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down

#* Key bindings
set-option -g prefix F12        # if not work, check if TERM=xterm
set-option -g status-keys emacs
set-option -g mode-keys emacs
bind-key -n F11 send-prefix     # F11 becomes 'prefix' of nested tmux sessions
bind-key C-b send-prefix        # F11 C-b ... nested nested ... sessions
bind-key | split-window -h -c "#{pane_current_path}" # default is "
bind-key _ split-window -v -c "#{pane_current_path}" # default is %
bind-key -r Tab select-pane -t:.+ # easier to key-chord than F12+<arrow>
bind-key -r BTab select-pane -t:.-
bind-key -T copy-mode-emacs C-g send-keys -X cancel # C-g (instead of ESC) to quit copy-mode
bind-key -T edit-mode-emacs C-g send-keys -X cancel # C-g to quit command editing
bind-key C-s set-window-option synchronize-panes
bind-key b set-option status
bind-key < set-option automatic-rename on
bind-key -r n next-window       # same as default ones but are repeat-able
bind-key -r p previous-window
bind-key -r Space next-layout

# Conflicts with my emacs settings.
# bind-key -nr C-Up select-pane -U
# bind-key -nr C-Down select-pane -D
# bind-key -nr C-Left select-pane -L
# bind-key -nr C-Right select-pane -R

bind-key c new-window -c "#{pane_current_path}"
bind-key m command-prompt -p "move (swap) current pane with: " "swap-pane -s %1"
bind-key j command-prompt "join-pane -h -d -s '%1'"
bind-key C command-prompt "new-window '%1'" # open a new window running given command
bind-key S command-prompt "new-session -s '%1'"

# Similar to mouse scroll
bind-key -T root PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"

#** Screen log
# `C-h' to save log
bind-key C-h command-prompt -p "save log to:" \
         "copy-mode; send-keys 'M->' C-e C-space 'M-<' C-a C-w; save-buffer %%"
# # if "set-window-option -g mode-keys vi", use this one:
# bind-key C-h command-prompt -p "save log to:" \
#          "copy-mode; send-keys g 'space' G 'enter'; save-buffer %%"

# ## NOT recommended
# bind-key h pipe-pane "cat >>$HOME/#S-#I-#P.log" \; \
#          rename-window "log" \; \
#          display-message "Start logging($HOME/#S-#I-#P.log)"

# bind-key H pipe-pane \; \
#          set-window-option automatic-rename on \; \
#          display-message "Stopped logging(#S-#I-#P.log)"

#* Copy/paste buffer

#** Paste from system clipboard (and save it to tmux buffer). Bind it to "C-]"
#** not "]" so that you need to explicitly request copying from system clipboard
#** by pressing an additional key (i.e. Control). This decision is made because
#** tmux buffer is for copying/pasting among CLIs but the system clipboard may
#** contain a large chunk of documentations or source code. Pasting such
#** contents into command line can be troublesome. Also see my .bashrc for the
#** function clean_tmux_buffers.
bind-key C-] run "tmux set-buffer \"$(pbpaste)\"; tmux paste-buffer"

#** some pre-set buffers
set-buffer -b hw "hello world"   # pre-load a frequently used text into buffer named "hw"

#* Usage of Screen in case tmux is not available
#***********************************************
#
# screen -S foo # new session foo
# screen -x foo # attach to session foo
# screen -ls    # list all sessions
# C-a C-c       # create a new window
# C-a "         # list and switch window
# C-a C-d       # detach
# C-a k         # kill window       
