# -*-mode:org; coding:utf-8; time-stamp-pattern:"8/#\\+DATE:[ \t]+%Y-%02m-%02d %5z$" -*-
# Created:  Lungang Fang 2024-05-17

#+TITLE: My Shell Related Configurations
#+AUTHOR: Fang Lungang
#+DATE: 2024-08-18 +1000

* bash_profile
:PROPERTIES:
:header-args:bash: :tangle ~/.bash_profile
:END:

** Environment variables
*** OSX specific
#+begin_src bash
# For OS X homebrew commands
PATH="/opt/homebrew/bin:$PATH"
PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH"
MANPATH=/opt/homebrew/share/man:$MANPATH

# For OS X homebrew openssl
PATH=/usr/local/opt/openssl@1.1/bin:$PATH
#+end_src

*** For ubuntu
#+begin_src bash
PATH="/snap/bin:$PATH"
#+end_src

*** Common
#+begin_src bash
export PATH=$HOME/.local/bin:$PATH
export MANPATH=$HOME/.local/share/man:$MANPATH
export INFOPATH=$HOME/.local/share/info:$INFOPATH
export HISTCONTROL="ignoredups"
export HISTFILESIZE=1000
export HISTSIZE=500

# For golang
export GOPATH=$HOME/golang
#+end_src

** Source in bashrc
#+begin_src bash
#* source in .bashrc *after* the ENVs (PATH etc.) are set.
[ -f "$HOME/.bashrc" ] && source "$HOME/.bashrc"
#+end_src

** Attach to a tmux session
#+begin_src bash
  if [[ $- == *i* && "$TERM" == "xterm-256color" ]]; then
      # Attach to (or start) a tmux session on when in an inteactive and expected
      # (xterm-*) environment.
      [ -n "$TMUX" ] || tg
  fi
#+end_src

* bashrc
:PROPERTIES:
:header-args:bash: :tangle ~/.bashrc
:END:

** Source global settings
#+begin_src bash
#* Do nothing if not running interactively
[[ "$-" != *i* ]] && return

#* Source in global settings
if [ -f /etc/bashrc ]; then
    source /etc/bashrc
fi
#+end_src

** TTY

*** Keys

#+begin_src bash
  stty -ixon        # Disable flow control, i.e. ^s "freeze screen" and ^q resume
  stty erase ^?     # Kill ^u intr ^c eof ^d stop ^s
  set -o ignoreeof  # Do not logout when "ctrl + D pressed"
  set -o emacs      # Emacs style hotkeys
  export EDITOR=vi
#+end_src

*** Term & color

#+begin_src bash
  if [[ $- == *i* && "$TERM" != "dumb" ]]; then
      TERM=xterm-256color
      export TERM
      COLORTERM=truecolor
      export COLORTERM
  fi
#+end_src

Nowadays, =xterm-256= has become a "fall-back" solution. Many color themes
demand "true color" support.

Explicit setting =COLORTERM= to =truecolor= on the remote hosts otherwise SSH
sessions to them won't use true color, which will causing Emacs color themes to
appear different (ugly) than they do in local sessions. See [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Colors-on-a-TTY.html][Colors on a TTY]] for
more information.

** PS1
As per [[https://stackoverflow.com/a/77033447][this stack overflow post]], Bash parses the PS1 string in two passes:
#+begin_quote
1. During the first pass, Bash handles all of PS1's special characters, including =\a= for a bell,
   =\t= for the time, and =\[= to introduce non-printing characters like color codes.
2. During the second pass, Bash performs the usual parameter expansion, command substitution, etc...
   The second pass is optional based on the promptvars shell option.
This means that any special characters that appear directly in PS1 are recognized. Even special
characters within command substitutions are recognized and replaced.
#+end_quote

Hence, for the sake of flexibility, I use =printf= instead of putting the color codes in PS1
directly. As a result, we must use =\x01= and =\x02= instead of =\[= and =\]= to enclose
none-printing chars.

NOTE:
- Must use single quotes NOT double quotes so that escape backslashes are not escaped.
- Color codes: https://misc.flogisoft.com/bash/tip_colors_and_formatting

There is no third pass.
#+begin_src bash
  MY_RESET='\x01\e[0m\x02'
  MY_REVERSE='\x01\e[7m\x02'

  MY_GREEN='\x01\e[32m\x02'
  MY_BLUE='\x01\e[38;5;33m\x02'
  MY_PURPLE='\x01\e[35m\x02'
  MY_CYAN='\x01\e[36m\x02'
  MY_GRAY='\x01\e[37m\x02'

  MY_DGRAY='\x01\e[90m\x02'
  MY_LGREEN='\x01\e[92m\x02'
  MY_LBLUE='\x01\e[94m\x02'

  MY_KAHKI='\x01\e[38;5;101m\x02'
  MY_YEGRE='\x01\e[38;5;106m\x02'

  PS1='\n'                        # An extra line to separte previous output and PS1

  PS1=$PS1'$(printf "${MY_GREEN}╭")'                    # 1st line
  PS1=$PS1'$(ps1_pyvenv)'                               # py venv
  PS1=$PS1'$(ps1_git)'                                  # git branch
  PS1=$PS1'$(ps1_kube)'                                 # kube context
  PS1=$PS1'$(printf " ${MY_GRAY}󰞷 ${MY_DGRAY}\!")'      # command number
  PS1=$PS1'$(printf " ${MY_GRAY} ${MY_DGRAY}\D{%T%z}")' # time
  PS1=$PS1'\n'                                          # end of first line
  PS1=$PS1'$(printf "${MY_GREEN}│")'                    # 2nd line
  PS1=$PS1'$(ps1_warn_msg)'                             # warn message (if there is any)
  PS1=$PS1'$(printf " ${MY_YEGRE}\u@\h")'               # user@host
  PS1=$PS1'$(printf ":${MY_BLUE}\w")'                   # working directory
  PS1=$PS1'\n'                                          # end of second line
  PS1=$PS1'$(printf "${MY_GREEN}╰ \$") '                # 3rd line, "$"/"#" sign on a new line
  PS1=$PS1'$(printf "${MY_RESET}")'                     # restore to the default color

  function ps1_pyvenv {
      if [ -z "${VIRTUAL_ENV+x}" ]; then
          return
      fi

      printf " ${MY_GRAY}%s${MY_DGRAY}%s" " " "${VIRTUAL_ENV/#$HOME/\~}"
  }

  function ps1_git {
      command -v git >/dev/null || return
      # get git branch of pwd
      local branch
      branch="$(git symbolic-ref --short -q HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)"
      if [ -n "$branch" ]; then
          printf " ${MY_GRAY}%s${MY_DGRAY}%s" " " "$branch"
      fi
  }

  function ps1_kube {
      command -v kubectl >/dev/null || return
      local kube_context="$(kubectl config current-context 2>/dev/null)"
      local kube_namespace="$(kubectl config view --minify --output 'jsonpath={..namespace}' 2>/dev/null)"
      if [ -n "$kube_context" -o -n "$kube_namespace" ]; then
          printf " ${MY_GRAY}%s${MY_DGRAY}%s" "󰠳 " "$kube_context/$kube_namespace"
      fi
  }

  function ps1_warn_msg {
      [ -z "$MY_WARN" ] || printf " ${MY_REVERSE}${MY_PURPLE}%s${MY_RESET}" "$MY_WARN"
  }
#+end_src

** LS_COLORS
Note: as the name indicates, it affects the command =ls= only.
#+begin_src bash
  [ -f ~/.dir_colors ] && eval $(dircolors ~/.dir_colors)
#+end_src

** fzf

To get more details, run =fzf --bash > fzf.bash= and then review the generated file.

I added =grep -v 'bind -m emacs-standard'= mainly to prevent =C-t= and =M-c= from being bound to fzf
functions, as I frequently use these key bindings and prefer them unchanged.

#+begin_src bash
if command -v fzf > /dev/null 2>&1; then
    eval "$(fzf --bash | grep -v 'bind -m emacs-standard')"
    _fzf_setup_completion path et
fi
#+end_src

** To migrate
#+begin_src bash
#* Shell options
# command history related
shopt -s histappend
shopt -s histverify  # edit the resulting command instead of run it directly
# directory
shopt -s autocd
shopt -s cdspell
shopt -s dirspell
shopt -s checkwinsize
# shopt -q progcomp

ulimit -n 65536

#* auto-completion
if [ -r "/usr/local/etc/profile.d/bash_completion.sh" ]; then
    source "/usr/local/etc/profile.d/bash_completion.sh"
fi

if [ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]; then
    source "/opt/homebrew/etc/profile.d/bash_completion.sh"
fi

if [ -d "$HOME/.bash_completion.d" ]; then
    for each in $HOME/.bash_completion.d/*; do
        source "$each"
    done
fi

#* aliases and functions (note: prefer functions than aliases)
alias hex='od -Ax -tx1z -v'
alias no_color='sed -e "s/\x1b\[[0-9;]*m//g"' # remove escape sequences for ANSI
                                              # color etc.
alias ls='ls --color=auto'
alias rm='rm -I'                  # IMHO, much better than 'rm -i'
alias lsmnt='mount | column -t'   # a better format
alias evg=evergreen

#** command history
function nh {
    echo 'Discard command history'
    export HISTFILE=/dev/null
    # Can actually restore it by setting HISTFILE before quit the session
}

#** directory bookmark
declare -A _lgfang_dir_bookmark
declare _lgfang_dir_file=~/.dir_mark

function dm {
    # directory bookmark
    local usage="
$FUNCNAME        Store current directory to the first available bookmark
$FUNCNAME x      Store current directory to bookmark 'x' (overwrite if needed)
$FUNCNAME -x     Remove bookmark 'x'

Where x is one of [0-9a-z]"

    # reload & save every time bookmark/jump to keep the file up to minute. CPU
    # consumption should not be a concern.
    [ -r "$_lgfang_dir_file" ] && source "$_lgfang_dir_file"

    local subscript=$1
    local each

    if [ -n "$subscript" ] && ! [[ "$subscript" =~ ^-?[0-9a-z]$ ]]; then
        echo "Invalid subscript '$subscript', usage: $usage" >&2
        return 1
    fi

    if [[ "$subscript" =~ ^-.*$ ]]; then
        subscript=${subscript#-}
        local dir=${_lgfang_dir_bookmark[$subscript]}
        unset _lgfang_dir_bookmark[$subscript]
        declare -p _lgfang_dir_bookmark > "$_lgfang_dir_file"
        echo "Bookmark removed: $subscript -> '$dir'"
        return 0
    fi

    local pwd=$(pwd)

    for each in {0..9} {a..z}; do # remember this many directories
        if [ "${_lgfang_dir_bookmark[$each]}" == "$pwd" ]; then
            echo "Already exits: $each -> $pwd"
            return
        fi
    done

    if [ -z "$subscript" ]; then # didn't specify a subscript, find one unused

        for each in {0..9} {a..z}; do
            if [ -z "${_lgfang_dir_bookmark[$each]}" ]; then
                subscript=$each
                break
            fi
        done

        if [ -z "$subscript" ]; then
            echo "Cannot find any unoccupied subscript," \
                 "please explictly specify one" >&2
            return 1
        fi
    fi

    _lgfang_dir_bookmark[$subscript]="$pwd"
    declare -p _lgfang_dir_bookmark > "$_lgfang_dir_file"
    echo "Bookmark added: $subscript -> '$pwd'"
}

function dj {
    local usage="$FUNCNAME x (where x is one of [0-9a-z])"
    local subscript=$1

    [ -r "$_lgfang_dir_file" ] && source "$_lgfang_dir_file"
    declare -p _lgfang_dir_bookmark &>/dev/null

    if [ $? -ne 0 ]; then
        echo "no bookmark available" >&2
        return 1
    fi

    if ! [[ "$subscript" =~ ^[0-9a-z]$ ]]; then
        echo "Invalid subscript '$subscript', usage: $usage" >&2
        return 1
    fi

    if [ -z "${_lgfang_dir_bookmark[$subscript]}" ]; then
        echo "no bookmark set for '$subscript'" >&2
        return 1
    fi

    cd "${_lgfang_dir_bookmark[$subscript]}"
}

function lsdm {
    local usage="
$FUNCNAME [PATTERN]

List directory bookmarks (if given, only those which match the PATTERN)."

    local pattern=$1

    [ -r "$_lgfang_dir_file" ] && source "$_lgfang_dir_file" || return 0

    for each in "${!_lgfang_dir_bookmark[@]}"; do
        local dir=${_lgfang_dir_bookmark[$each]}
        if [ -z "$pattern" ] || [[ "$dir" =~ $pattern ]]; then
            echo -e "$each - $dir"
        fi
    done
}

#** directory stack
function cd {
    # function instead alias to take effect even in scripts (say, my "ep")
    mycd "$@"
}

function mycd {
    # 1, pushd by default. 2, supports "cd from to".
    local dest

    if [ $# -eq 0 ]; then
        dest=~
    elif [ $# -eq 1 ]; then
        dest=$1
    elif [ $# -eq 2 ]; then
        dest=${PWD//$1/$2}
    else
        echo "error: two many arguments" >&2
        return 1
    fi

    mypushd "$dest"
}

function mypushd {
    ## 1. Don't bloat the history forever.
    #* 2. shopt pushdsilent not available in bash, redirect to /dev/null

    local dest=$1

    if [[ "$dest" =~ ^\.\.\.\.*$ ]]; then
        # expand "cd ...." to cd "../../.."
        dest=${dest#..}
        dest="..${dest//.//..}"
    fi

    builtin pushd "$dest" > /dev/null

    # Remove duplication
    local index stored new_one
    new_one=$(builtin dirs +0)

    for index in {1..10}; do
        stored=$(builtin dirs +${index} 2>/dev/null) || break
        if [ "$stored" == "$new_one" ]; then
            popd -n +$index >/dev/null 2>&1
            break
        fi
    done

    # Delete 11th dir if there is, hence keep the stack size <=10.
    builtin popd -n +11 >/dev/null 2>&1
}

alias dirs='dirs -v'
alias bd='pushd +1 >/dev/null'  # backward in history
alias fd='pushd -0 >/dev/null'  # forward

#** emacs
# start emacsclient (and emacs daemon if necessary)
alias et='emacsclient -a "" -t'
alias ew='emacs-w32&'           # start GUI emacs, for cygwin

function ep { # go to current directory of emacs(daemon)
    cd "$(emacsclient -e '(expand-file-name
        (with-current-buffer (window-buffer) default-directory))' | tr -d \")"
}

#** git

function git_clean_branches {
    local OPTIND=1
    local optstring="nm:"
    local not_dry_run=""
    local master_branch_name="master"

    while getopts $optstring opt; do
        case $opt in
            n) not_dry_run="x";;
            m) master_branch_name="$OPTARG";;
            *) return 1;;
        esac
    done

    git fetch -p
    merged=( $(git branch --merged="$master_branch_name" | grep -v "$master_branch_name") )
    remote_deleted=( $(git for-each-ref --format='%(if:equals=[gone])%(upstream:track)%(then)%(refname:short)%(end)' refs/heads) )

    echo "merged: ${merged[*]}"
    echo "deleted: ${remote_deleted[*]}"

    if [ "${not_dry_run}" == "x" ]; then
        for each in "${merged[@]}" "${remote_deleted[@]}"; do
            git branch -D "$each"
        done
    else
        echo "Re-run with '-n' to delete the above branches"
    fi
}

function gerrit {
    # submit current commit to gerrit for review
    local branch=$1
    [ -n "$branch" ] || branch=$(git name-rev --name-only HEAD)
    # NOTE: Do NOT use the following measure in git_4_ps1 since this
    # command cannot deal with detached checkout
    [ -n "$branch" ] || echo "ERROR: not in a valid branch!" >&2
    git push origin "HEAD:refs/for/$branch"
}

## git fzf operation

function gcob() {               # git check out branch
    local dividing_line="----------------"
    {                           # local branches first
        git for-each-ref --sort=committerdate refs/heads --format='%(refname:short)'
        echo "${dividing_line}"
        git for-each-ref --sort=committerdate refs/remotes --format='%(refname:short)'
    } | \
        fzf --ansi --no-sort --reverse --preview-window=right:60%  \
            --bind "alt-n:preview-down,alt-p:preview-up,ctrl-v:preview-page-down,alt-v:preview-page-up" \
            --preview="[ {} == \"${dividing_line}\" ] || git log -6 --format=fuller --stat --color=always {}" | \
        sed -e 's!^origin/!!' | xargs -I{} git checkout {}
}
export -f gcob

function gcommits () {          # git select commits
    # inspired by https://gist.github.com/junegunn/f4fca918e937e6bf5bad
    git log --color=always --graph --abbrev-commit \
        --format='%C(cyan)%h%C(reset) - %C(green)%s %C(dim white)- %cr (%an)%C(reset) %C(yellow)%d' "$@" | \
        fzf --multi --ansi --no-sort --reverse --tiebreak=index --preview-window=right:60% \
            --bind "alt-n:preview-down,alt-p:preview-up,ctrl-v:preview-page-down,alt-v:preview-page-up" \
            --preview 'f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always $1 ; }; f {}' | \
        awk '{print $2}' | tr '\n' ' '
}
export -f gcommits

function gpick () {
    gcommits "$@" | xargs git cherry-pick
}
export -f gpick

#** json/jq
# convert bson dump to valid json for jq
function bson2json {
    # usage: cat test.json | bson2json | jq '...'
    sed -e 's/BinData([0-9]*,\([^)]*\))/\1/g' \
        -e 's/Timestamp(\([0-9]*\)[^)]*)/\1/g' \
        -e 's/ISODate("\([^"]*\)"[^)]*)/"\1"/g' \
        -e 's/NumberLong("\([^"]*\)"[^)]*)/"\1"/g' \
        -e 's/NumberLong(\([^)]*\))/"\1"/g' \
        -e 's/ObjectId("\([^"]*\)"[^)]*)/"\1"/g' \
        -e 's/LUUID("\([^"]*\)"[^)]*)/"\1"/g'\
        -e 's/UUID("\([^"]*\)"[^)]*)/"\1"/g'
}

#** kubernetes

# kubectl autocomplete if this command is installed
command -v kubectl >/dev/null && source <(kubectl completion bash)

# alias 'k' and ensure autocomplete also works for it.
alias k=kubectl
complete -F __start_kubectl k

function kns {
    # a function to set namespace. It is not worthwhile to `brew install kubectx' for kubens

    if [[ -n "$2" ]]; then
        # Two or more parameters, error out
        echo "Usage: kns [namespace]" >&2
        return 1
    elif [[ -z "$1" ]]; then
        # No namespace specified, list existing ones
        kubectl get namespace
    elif ! kubectl get namespace "$1" >/dev/null 2>&1; then
        echo "Error: namespace '$1' does not exist" >&2
        return 1
    else
        kubectl config set-context $(kubectl config current-context) --namespace="$1"
    fi
}

#*** GKE
if [ -f "$HOME/.local/google-cloud-sdk/path.bash.inc" ]; then
    source "$HOME/.local/google-cloud-sdk/path.bash.inc"
fi
if [ -f "$HOME/.local/google-cloud-sdk/completion.bash.inc" ]; then
     source "$HOME/.local/google-cloud-sdk/completion.bash.inc"
fi

#** ssh

alias scp='scp -o LogLevel=error' # don't print motd etc.
alias ssh='ssh -o LogLevel=error'

function get_ssh_agent {        # print ssh agent info

    if [ -n "$SSH_AGENT_PID" -o -n "$SSH_AUTH_SOCK" ]; then
        echo "Current ssh agent is:"
        for each in SSH_AGENT_PID SSH_AUTH_SOCK; do
            eval "echo export $each=\${$each}"
        done
        return
    fi

    # Search in command history. This works because we set shopt to append
    # command history on the fly.
    hist=$(history | grep SSH | grep -v grep | awk '{$1="";print $0}')
    # Note: don't "sort -u", which will break match between agent pid and sock
    if [ -n "$hist" ]; then
        echo "Possible ssh agent(s):"
        echo "$hist"
    else
        echo "No clue about ssh agent"
    fi
}

#** terminal window
function mytitle {
    ## usage: mytitle [text]
    # Set the "terminal title" to "text"; if no argument provided, try to reset
    # the title if possible. Things can get complicated with tmux & emulator
    # tabs. Assuming the shell is in a tmux session in an terminal emulator tab,
    # then there are 4 titles: i.e. emulator window title, emulator pane/tab
    # title, tmux pane title, tmux window title. In this scenario, this function
    # sets the tmux pane title. To set the emulator pane/tab title, you can use
    # "tmux set-option -g set-titles-string '...'"

    if [ -z "${PROMPT_COMMAND[*]}" ]; then
        # PROMPT_COMMAND is unset/empty, simply echo the escape sequence once is
        # enough.
        echo -ne "\033]0;$1\007"
        return
    fi

    # PROMPT_COMMAND is not empty. It may or may not set title. For simplicity,
    # just assume it does. Instead of trying to find and replace corresponding
    # command, we just set/overwrite title at the end.
    if [ $# -gt 0 ]; then
        if [ -z "${ORG_PROMPT_COMMAND+x}" ]; then
            # ORG_PROMPT_COMMAND is unset, must be calling this function for the
            # first time, store the system default PROMPT_COMMAND into
            # ORG_PROMPT_COMMAND.
            ORG_PROMPT_COMMAND=("${PROMPT_COMMAND[@]}") # copy array
        fi
        PROMPT_COMMAND=("${ORG_PROMPT_COMMAND[@]}" "echo -ne '\033]0;$1\007'")
    else
        # restore system default
        if [ -n "$ORG_PROMPT_COMMAND" ]; then
            PROMPT_COMMAND=("${ORG_PROMPT_COMMAND[@]}")
            unset ORG_PROMPT_COMMAND
        fi
    fi
}
export -f mytitle

#** tmux related

function tg { # Attach to specified tmux session
    #* 1. If the session does not exist, create it.
    ## 2. If no session name specified, prompt to choose from existing ones.

    # A simple/naive replacement of this "bloated" function:
    # tmux -2 attach -t "$session_name" || tmux -2 new -s "$session_name"

    if ! command -v tmux >/dev/null; then
        echo "Warn: tmux could not be found, not starting any tmux session"
        return
    fi

    local usage="tg [-d] [session_name]"
    local detach_others=""

    while getopts "d" opt; do
        case $opt in
            d) detach_others="-d";;
            ?) echo "$usage" >&2;;
        esac
    done
    shift $((OPTIND - 1))

    local session_name="$1"

    if [ -n "$session_name" ]; then
        tmux -2 attach $detach_others -t "$session_name" \
            || tmux -2 new -s "$session_name"
        return
    fi

    # No session name specified, act according to the number of sessions
    local sessions=$(tmux list-sessions -F "#{session_name}")

    if [ -z "$sessions" ]; then
        tmux -2 new -s 'misc'
        return
    fi

    if [ "$(echo "$sessions" | wc -l)" -eq 1 ]; then
        tmux -2 attach $detach_others -t "$sessions"
        return
    fi

    # Multiple sessions, prompt to choose one

    local IFS=$'\n' # In case session names contain whitespaces. Must
                    # 'local' to NOT pollute the global 'IFS'.
                    # $'LITERAL_STR' => ansi-c quoting
    local PS3="Select a session: "

    select session_name in $sessions; do

        if [ -n "$session_name" ]; then # A valid choice
            tmux -2 attach $detach_others -t "$session_name"
            return
        else
            echo "Invalid index '$REPLY', please retry"
        fi

    done
}

function tt {
    # List all tty used by tmux. If given a process name, find out all related
    # tmux panes, go to one of it.

    # usage: tt [process_name]

    # Note: once you find a pane, you may send keys to that process WITHOUT
    # going to that pane by running 'tmux send-keys -t s:w.p abcd'.

    local process_name="$1"
    local procs proc panes pane IFS PS3 choices choice

    if [ -n "$process_name" ]; then
        procs=$(ps -e | grep "\b$process_name" | grep -v '?')
    else
        procs=$(ps -e | grep -v '?')
    fi

    panes=$(tmux list-panes -a -F '#S:#I.#P #{pane_tty}')

    IFS=$'\n'
    for pane in $panes; do
        tty=$(echo "$pane" | awk -v FS='/' '{print $NF}')
        proc=$(echo "$procs" | grep "\b$tty\b")
        if [ -n "$proc" ]; then
            # got it, do a little format
            proc=$'\n'"$proc"
            choice=$(paste <(echo "$pane") <(echo "$proc"))
            choices=("${choices[@]}" "$choice")
        fi
    done

    PS3='Which pane to go? '
    select choice in "${choices[@]}"; do
        if [ -n "$choice" ]; then #
            tmux switch-client -t "$(echo "$choice" | awk '{print $1; exit}')"
            return
        else
            echo "Invalid '$REPLY', retry"
        fi
    done
}
export -f tt

function to_tmux_buffer {
    # usage: cat file | this_function
    while read line; do
        tmux set-buffer "$line"
    done
}

function tmux_clean_buffers {
    # Tmux paste buffer is mainly for copy/paste between CLI. If a large chunk
    # of documentation or source code is saved into a tmux paste buffer. Pasting
    # such content into CLI (or even editors) via tmux can cause issues. Run
    # this function manually to delete suspiciously large buffers (> 2048 bytes
    # by default) to avoid accidentally pasting such buffers.

    local threshold=${1:-256}
    tmux list-buffers | awk -v threshold=$threshold '{if($2 > threshold){print $1, $2, $3}}' | while read line; do
        echo "Deleting ${line%:*}"
        tmux delete-buffer -b ${line%%:*};
    done
    echo "all buffers bigger than $threshold bytes are deleted"
}

function wake {
    wakeonlan -i lgfang78.oicp.net 00:23:ae:98:83:91
}

#+end_src

** inputrc (for bash)

#+begin_src bash
  # Normally, following settings are put into ~/.inputrc, with only stuff
  # enclosed within single quotes kept. For me, I prefer to keep all stuff in
  # one place to make it more explicit.

  bind 'set show-all-if-ambiguous on'
  bind 'set completion-ignore-case on'

  # double <esc> to cycle through possible completions
  bind '"\e\e":menu-complete'

  # M-p,M-n works like those in eshell
  bind '"\ep": history-search-backward'
  bind '"\en": history-search-forward'

  bind '"\C-w":kill-region'
#+end_src

* dirs_colors
:PROPERTIES:
:header-args:bash: :tangle ~/.dir_colors
:END:

The color theme for =ls=. To avail it, [[*LS_COLORS][set LS_COLORS]]
#+begin_src bash
# Dark 256 color solarized theme for the color GNU ls utility.
# Used and tested with dircolors (GNU coreutils) 8.5
#
# @author  {@link http://sebastian.tramp.name Sebastian Tramp}
# @license http://sam.zoy.org/wtfpl/  Do What The Fuck You Want To Public License (WTFPL)
#
# More Information at
# https://github.com/seebi/dircolors-solarized

# Term Section
TERM Eterm
TERM ansi
TERM color-xterm
TERM con132x25
TERM con132x30
TERM con132x43
TERM con132x60
TERM con80x25
TERM con80x28
TERM con80x30
TERM con80x43
TERM con80x50
TERM con80x60
TERM cons25
TERM console
TERM cygwin
TERM dtterm
TERM eterm-color
TERM fbterm
TERM gnome
TERM gnome-256color
TERM jfbterm
TERM konsole
TERM konsole-256color
TERM kterm
TERM linux
TERM linux-c
TERM mach-color
TERM mlterm
TERM putty
TERM putty-256color
TERM rxvt
TERM rxvt-256color
TERM rxvt-cygwin
TERM rxvt-cygwin-native
TERM rxvt-unicode
TERM rxvt-unicode256
TERM rxvt-unicode-256color
TERM screen
TERM screen-16color
TERM screen-16color-bce
TERM screen-16color-s
TERM screen-16color-bce-s
TERM screen-256color
TERM screen-256color-bce
TERM screen-256color-s
TERM screen-256color-bce-s
TERM screen-bce
TERM screen-w
TERM screen.linux
TERM st
TERM st-meta
TERM st-256color
TERM st-meta-256color
TERM vt100
TERM xterm
TERM xterm-16color
TERM xterm-256color
TERM xterm-88color
TERM xterm-color
TERM xterm-debian
TERM xterm-termite

## Documentation
#
# standard colors
#
# Below are the color init strings for the basic file types. A color init
# string consists of one or more of the following numeric codes:
# Attribute codes:
# 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed
# Text color codes:
# 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 37=white
# Background color codes:
# 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white
#
#
# 256 color support
# see here: http://www.mail-archive.com/bug-coreutils@gnu.org/msg11030.html)
#
# Text 256 color coding:
# 38;5;COLOR_NUMBER
# Background 256 color coding:
# 48;5;COLOR_NUMBER

## Special files

NORMAL 00;38;5;244 # no color code at all
#FILE 00 # regular file: use no color at all
RESET 0 # reset to "normal" color
DIR 00;38;5;33 # directory 01;34
LINK 00;38;5;37 # symbolic link. (If you set this to 'target' instead of a
 # numerical value, the color is as for the file pointed to.)
MULTIHARDLINK 00 # regular file with more than one link
FIFO 48;5;230;38;5;136;01 # pipe
SOCK 48;5;230;38;5;136;01 # socket
DOOR 48;5;230;38;5;136;01 # door
BLK 48;5;230;38;5;244;01 # block device driver
CHR 48;5;230;38;5;244;01 # character device driver
ORPHAN 48;5;235;38;5;160 # symlink to nonexistent file, or non-stat'able file
SETUID 48;5;160;38;5;230 # file that is setuid (u+s)
SETGID 48;5;136;38;5;230 # file that is setgid (g+s)
CAPABILITY 30;41 # file with capability
STICKY_OTHER_WRITABLE 48;5;64;38;5;230 # dir that is sticky and other-writable (+t,o+w)
OTHER_WRITABLE 48;5;235;38;5;33 # dir that is other-writable (o+w) and not sticky
STICKY 48;5;33;38;5;230 # dir with the sticky bit set (+t) and not other-writable
# This is for files with execute permission:
EXEC 00;38;5;64

## Archives or compressed (violet + bold for compression)
.tar    00;38;5;61
.tgz    00;38;5;61
.arj    00;38;5;61
.taz    00;38;5;61
.lzh    00;38;5;61
.lzma   00;38;5;61
.tlz    00;38;5;61
.txz    00;38;5;61
.zip    00;38;5;61
.z      00;38;5;61
.Z      00;38;5;61
.dz     00;38;5;61
.gz     00;38;5;61
.lz     00;38;5;61
.xz     00;38;5;61
.bz2    00;38;5;61
.bz     00;38;5;61
.tbz    00;38;5;61
.tbz2   00;38;5;61
.tz     00;38;5;61
.deb    00;38;5;61
.rpm    00;38;5;61
.jar    00;38;5;61
.rar    00;38;5;61
.ace    00;38;5;61
.zoo    00;38;5;61
.cpio   00;38;5;61
.7z     00;38;5;61
.rz     00;38;5;61
.apk    00;38;5;61
.gem    00;38;5;61

# Image formats (yellow)
.jpg    00;38;5;136
.JPG    00;38;5;136 #stupid but needed
.jpeg   00;38;5;136
.gif    00;38;5;136
.bmp    00;38;5;136
.pbm    00;38;5;136
.pgm    00;38;5;136
.ppm    00;38;5;136
.tga    00;38;5;136
.xbm    00;38;5;136
.xpm    00;38;5;136
.tif    00;38;5;136
.tiff   00;38;5;136
.png    00;38;5;136
.svg    00;38;5;136
.svgz   00;38;5;136
.mng    00;38;5;136
.pcx    00;38;5;136
.dl     00;38;5;136
.xcf    00;38;5;136
.xwd    00;38;5;136
.yuv    00;38;5;136
.cgm    00;38;5;136
.emf    00;38;5;136
.eps    00;38;5;136
.CR2    00;38;5;136
.ico    00;38;5;136

# Files of special interest (base1 + bold)
.tex             00;38;5;245
.rdf             00;38;5;245
.owl             00;38;5;245
.n3              00;38;5;245
.ttl             00;38;5;245
.nt              00;38;5;245
.torrent         00;38;5;245
.xml             00;38;5;245
*Makefile        00;38;5;245
*Rakefile        00;38;5;245
*build.xml       00;38;5;245
*rc              00;38;5;245
*1               00;38;5;245
.nfo             00;38;5;245
*README          00;38;5;245
*README.txt      00;38;5;245
*readme.txt      00;38;5;245
.md              00;38;5;245
*README.markdown 00;38;5;245
.ini             00;38;5;245
.yml             00;38;5;245
.cfg             00;38;5;245
.conf            00;38;5;245
.c               00;38;5;245
.cpp             00;38;5;245
.cc              00;38;5;245

# "unimportant" files as logs and backups (base01)
.log        00;38;5;240
.bak        00;38;5;240
.aux        00;38;5;240
.lof        00;38;5;240
.lol        00;38;5;240
.lot        00;38;5;240
.out        00;38;5;240
.toc        00;38;5;240
.bbl        00;38;5;240
.blg        00;38;5;240
*~          00;38;5;240
*#          00;38;5;240
.part       00;38;5;240
.incomplete 00;38;5;240
.swp        00;38;5;240
.tmp        00;38;5;240
.temp       00;38;5;240
.o          00;38;5;240
.pyc        00;38;5;240
.class      00;38;5;240
.cache      00;38;5;240

# Audio formats (orange)
.aac    00;38;5;166
.au     00;38;5;166
.flac   00;38;5;166
.mid    00;38;5;166
.midi   00;38;5;166
.mka    00;38;5;166
.mp3    00;38;5;166
.mpc    00;38;5;166
.ogg    00;38;5;166
.ra     00;38;5;166
.wav    00;38;5;166
.m4a    00;38;5;166
# http://wiki.xiph.org/index.php/MIME_Types_and_File_Extensions
.axa    00;38;5;166
.oga    00;38;5;166
.spx    00;38;5;166
.xspf   00;38;5;166

# Video formats (as audio + bold)
.mov    00;38;5;166
.mpg    00;38;5;166
.mpeg   00;38;5;166
.m2v    00;38;5;166
.mkv    00;38;5;166
.ogm    00;38;5;166
.mp4    00;38;5;166
.m4v    00;38;5;166
.mp4v   00;38;5;166
.vob    00;38;5;166
.qt     00;38;5;166
.nuv    00;38;5;166
.wmv    00;38;5;166
.asf    00;38;5;166
.rm     00;38;5;166
.rmvb   00;38;5;166
.flc    00;38;5;166
.avi    00;38;5;166
.fli    00;38;5;166
.flv    00;38;5;166
.gl     00;38;5;166
.m2ts   00;38;5;166
.divx   00;38;5;166
.webm   00;38;5;166
# http://wiki.xiph.org/index.php/MIME_Types_and_File_Extensions
.axv 00;38;5;166
.anx 00;38;5;166
.ogv 00;38;5;166
.ogx 00;38;5;166



#+end_src
